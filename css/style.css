*{
  margin: 0;
  padding: 0;
  font-family: 'Vollkorn', Georgia, serif;
}

li {
  list-style: none;
}

a {
  text-decoration: none;
}

img {
  display: block; /* Assim ela irá tirar uma margin que as imagens tem por padrão */
  border-radius: 5px;
  max-width: 100%;
}

:root {
  --background-gradient: linear-gradient(135deg, #8844ee, #B07DFB);
  --background-sidnav: #fafbfc; 
  --hover: #B07DFB; 
  --text: rgba(0,0,0,.7); 
}


/* GRID GERAL */

.estrutura {
  display: grid; /* dizendo o tipo de display que será*/
  grid-template-columns: minmax(160px, 1fr) 3fr 300px; /* Definindo a quantidade e tamanho das colunas, sendo a primeir coluna chega no mínim 160px e expande até no máxino 1fr; a segunda coluna eu qero que tenhas 3x o tamanho da primeira coluna; e a terceira coluna eu quero um valor fixo de 300px*/


  grid-template-areas: 
  /* 
  Aqui eu poderia usar o "grid" como atalho; Nessa parte eu apenas estou dizendo o que ficará em cada lugar, par aposicionar os elementos eu terei que selecioanr a classe e ajusar com o "grid-area" 
  */
    "header header header"
    "sidenav content anuncios"
    "footer footer footer" 
  ;
  /* Naõ definindo um tamnho de linha especifico por que eu quero que o tamanho seja relativo a quanto ele crescer */
}

.header {
  grid-area: header;
}

.sidenav {
  grid-area: sidenav;
}

.content {
  grid-area: content;
}

.anuncios {
  grid-area: anuncios;
}

.footer {
  grid-area: footer;
}





/* Header */

.header {
  background: var(--background-gradient);
  padding: 30px;
  display: grid; /* Criando um outro grid que não tem anda haver com o "grid geral" */
  grid-template-columns: 1fr auto; /* Criando duas colunas, uma de 1fr e outra automatica em relação ao tamanho da página*/
  align-items: center; /* Alinhando os itens no eixo vertical ao centro */
}

.logo { /* Aplicando a estilização na ".logo" por que dentro dela tem a tag "img", e assim a .logo" restringi o tamanho da imagem, por que caso aplicasse direto no img, ele ficaria com o mesmo tamnho mas iria expandir o container até o maximo possivel */
  max-width: 200px;
}

.header nav ul {
  display: flex; /* Usanod felx box para quebrar o conteúdo e deixar na mesma linha*/
  flex-wrap: wrap; /* Para quebrar seus filhos caso não caiba na mesma linha */
}

.header nav a {
  display: block; 
  padding: 10px; /* Para que tenha uma área maior para se clicar */
  color: #FFF;
  font-size: 1.125em;
  background: rgba(0, 0, 0, .1); /* dizendo o ".1" uma opacidade de apenas 10% */
  border-radius: 5px;
  transition: 0.1s; /* Colocando o trnasition direto no elemento, por que caso coloque no "hover" ele aplica apenas quando entra, e quando sai ele acaba saindo seco */
}

.header nav a:hover {
  background: rgba(0, 0, 0, .5); /* dizendo o ".5" uma opacidade de apenas 50% */
}


/* 
  ERRO que ocorre: é que quando colocamos margin-left ou rigth para dar o espaçamento entre os elemento, ele acaba aplicando a estilização para todos os elemenento, sendo assim ficando um espaçamento em um dos itens da ponto que fará com que não pposicione corretamente o meu conteúdo em uma tela de desktop ou mobile 
*/

/* 
  SOLUÇÃO: com essa expressão "li +li" a estilização só será aplicada para o elemento li que vem seguido de outro elemento li, então nesse caso ele não irá aplicar a estilização par ao primeiro item por que ele não vem seguido de outro "li" por ele ser o primeiro, então basta colocar um "margin-left" que será aplicado neste caso apenas para o segundo e o terceiro(ultimo) item
*/
.header li + li { /* Solução de maneira prática sem ter que falar com os filho do "ul" */
  margin-left: 30px;
}





/* Sidenav */
.sidenav {
  background: var(--background-sidnav);
  padding: 30px; /* Padding padrão utilizado no site para as sessões*/
}

.sidenav li a {
  display: block; /* Porque por padrão a tag 'a' é display flex*/
  min-width: 60px; /* colocando esse valor de minimo para o conteiner onde fica a imagem porque caso ele diminua menos do que isso ele acaba estrango a minha imagem svg */
  max-width: 100px; /* E passando um máximo que o quadrado irá se espandir */
  margin: 0 auto 30px auto; /* dando um espaçamento externo da tag, sendo 0 para cima, automatico para os lados (para centralizar), e 30px para baixo */
  background: #FFF;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 5px 5px 10px 0px rgba(44,44,44,0.15); /* o 1º valor é para a direira, o 2º para baixo, o 3º é o quanto ele vai se camuflar, e o 4º é para todos os lados */ 
  transition: .1s ease-in-out; /* Passando uma transição para quando for aplicar o "hover" */
}

.sidenav li a:hover {
  background: var(--hover);
}





/* CONTENT */
.content{
  max-width: 900px; /* Definindo um max-width par que quando o usuário estejá em um munitor mairo, não estique tanto a linha dos textos */
  margin: 0 auto; /* para alinhar o CONTEÚDO ao CENTRO */
  padding: 30px;

  display: grid;
  grid-template-columns: 1fr 1fr; /* Definindo duas colunas de tamanhos prororcionais */
  gap: 30px;
}

.titulo {
  color: var(--hover);
}

.titulo h1{
  font-size: 3.75em;
  line-height: 1;
  font-weight: 700;
}

.titulo span {
  font-size: 0.875em;
  font-style: italic;
}


/* CARACTERISTICAS */
.caracteristicas {
  display: flex; /* para um item dicar ao lado do outro */
  align-items: flex-start; /* Como ele recebeu display flex, por padrão o flex ele faz com que o item cresce de ponta a ponta de acordo com o seu container pai */
}

.caracteristicas > div { /* Como não passei class nenhum para as div's, eu utilizo o ">" para falar especificamente com elas*/
  width: 80px;
  text-align: center; /* Alinhando o texto ao centro */
  background: var(--background-gradient);
  border-radius: 5px;
  box-shadow: 5px 5px 10px 0px rgba(44,44,44,0.15); /* o 1º valor é para a direira, o 2º para baixo, o 3º é o quanto ele vai se camuflar, e o 4º é para todos os lados */ 

  /* como o conteúdo roxo sobressai o branco do span "rotulo", valos colocar ele um pouco mais abaixo do span "numero" */
  position: relative; /* Colocando posição relativa aqui e no ".rotulo" e após isso de um "top: 2"*/
}

.caracteristicas > div:first-child { /* falando expecificamente com a primeira div */
  margin-right: 30px;
}

.caracteristicas span {
  display: block; /* Dando um display block para que os span's peguem de ponta a ponta */
  color: var(--hover);
}

.numero {
  color: var(--hover);
  font-size: 3em;
  line-height: 1;
  margin: 10px auto; /* Dando margin de 10px para cima/baixo e automatico aos lados para alinhar ao centro */
}

.rotulo {
  background: #FFF;
  border-radius: 0 0 5px 5px; /* Fazendo a borda apenas em baixo */
  padding: 5px 0;
  position: relative;
  top: 2;
}




.col-wide { /* É uma estilização para os itens que pegam de ponta a ponta, já que eu tenho no mínimo 3 itens que vão de ponta a ponta, é mais facil eu definir assim e apenas adicionar a classe ao meu HTML, para que não haja redundancia de código */
  grid-column: 1 / -1; /* Com isso fará que comece da coluna 1 e se extenda por todas as outras*/
}

.imagem-1 { /* Nesta classe irá definir a quantidade de "linhas" que a imagem irá ocupar*/
  /* grid-row: 3 / 5; */
  grid-row: span 2; /* Sendo a mesma coisa que a linha  cima, começa na linha automática e se espando por 2 linhas */
  align-self: end ; /* Neste caso queremos alinhas as duas imagens ao fim. Usando para quando quero alinha o texto no eixo na vertica */
}

.imagem-2 {
  align-self: end; /* tambem alinhando o item ao final para caso o conteúdo aumente */
}


/* ESTILOS CONTENT */
p {
  font-size: 1.2em;
  line-height: 1.6; /* modificando a altura entre as linhas */
  letter-spacing: -0.005em; /* Isso irá alterar o espaçamento entre as letras */
  color: var(--text);
}

.informacoes p + p { /* Se aplicando a mesma coisa que já fizemos, apenas o "p" que vem seguido de outro "p" é quem receberá a estilização */
  margin-top: 30px; /* Com isso não adicionar espaçamento ao primeiro "p" e caso acrescente mais tags "p" dentro da div "informações", ele receberá a estilização*/
}







/* ANUNCIOS */
.anuncios {
  background: var(--background-sidnav);
  display: grid;
  align-content: start; /* Sendo o aling-content para o conteúdo/container e para o eixo y, na vertical */
  padding: 30px; /* Dando um espalamento interno */
  gap: 30px; /* Adicionando um espaçamento apenas entre os elementos, caso no @media eles acabem ficando um ao lado do outro, o gap ainda funcionará perfeitamente */
}





/* FOOTER */
.footer {
  background: var(--background-gradient);
}

.footer p {
  color: #FFF;
  text-align: center; /* Alinahndo o texto ao centro */
  padding:30px; /* Dando um espalamento interno */
}
